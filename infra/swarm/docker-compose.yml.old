version: "3.9"

# networks:
#   proxy:
#     driver: overlay
# internal:
#   external: false

services:
 
  ###### FRONTEND #######
  parastaseis-frontend:
    image: parastaseis_frontend
    # ports:
    #   - "4200:4200"
    deploy:
      labels:
        # - "traefik.enable=true"
        # - "traefik.http.routers.frontend.rule=Host(`eshop.tsilingeridis.eu`)"
        # - "traefik.http.routers.frontend.entrypoints=web"
        # - "traefik.http.routers.frontend.middlewares=test-redirectscheme"

        # - "traefik.http.routers.frontend-secure.rule=Host(`eshop.tsilingeridis.eu`)"
        # - "traefik.http.routers.frontend-secure.entrypoints=websecure"
        # - "traefik.http.routers.frontend-secure.tls.certresolver=myresolver"

        - "traefik.enable=true"
        - "traefik.http.routers.parastaseis-frontend.rule=Host(`parastaseis.webroom.gr`)"
        - "traefik.http.routers.parastaseis-frontend.service=parastaseis-frontend"
        - "traefik.http.routers.parastaseis-frontend.entrypoints=websecure"
        - "traefik.http.routers.parastaseis-frontend.tls.certresolver=myresolver"

        - "traefik.http.routers.parastaseis-frontend-secure.service=parastaseis-frontend-secure"
        - "traefik.http.services.parastaseis-frontend.loadbalancer.server.port=80"


        # - "traefik.http.routers.frontend-secure.service=frontend-service"
        # # - "traefik.http.routers.frontend-secure.middlewares=test-compress,test-ratelimit"
        # - "traefik.http.routers.frontend-secure.middlewares=test-compress"

        # # Services
        # - "traefik.http.services.frontend-service.loadbalancer.server.port=80"
        # # - "traefik.http.services.frontend-service.loadbalancer.server.port=4200"
        # # Compress Middleware
        # - "traefik.http.middlewares.test-compress.compress=true"
        # # Rate Limit Middleware
        # # - "traefik.http.middlewares.test-ratelimit.ratelimit.average=2"
        # # Redirect Scheme HTTP -> HTTPS
        # - "traefik.http.middlewares.test-redirectscheme.redirectscheme.scheme=https"
        # - "traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true"
    volumes:
      - ../../frontend:/app
      - /etc/localtime:/etc/localtime:ro
      # use the "backend" network
    # networks:
    #   - proxy
    # - internal
    # environment:
    #   - NODE_ENV=dev

  ###### BACKEND #######
  parastaseis-backend:
    image: parastaseis_backend
    # ports:
    #   - "3000:3000"
    deploy:
      labels:

        - "traefik.enable=true"
        - "traefik.http.routers.parastaseis_backend.rule=Host(`parastaseis.webroom.gr`) && (PathPrefix(`/api/`) || PathPrefix(`/uploads/`))"
        - "traefik.http.routers.parastaseis_backend.service=parastaseis_backend"
        - "traefik.http.routers.parastaseis_backend.entrypoints=websecure"
        - "traefik.http.routers.parastaseis_backend.tls.certresolver=myresolver"

        - "traefik.http.routers.parastaseis_backend-secure.service=parastaseis_backend-secure"
        - "traefik.http.services.parastaseis_backend.loadbalancer.server.port=5000"
        # - "traefik.enable=true"
        # - "traefik.http.routers.backend-router.rule=Host(`eshop.tsilingeridis.eu`) && (PathPrefix(`/api/`) || PathPrefix(`/images/`))"
        # # - "traefik.http.routers.backend-router.rule=Host(`eshop.tsilingeridis.eu`) && PathPrefix(`/api/`)"

        # - "traefik.http.routers.backend-router.entrypoints=web"
        # - "traefik.http.routers.backend-router.middlewares=test-redirectscheme"

        # - "traefik.http.routers.backend-secure.rule=Host(`eshop.tsilingeridis.eu`) && (PathPrefix(`/api/`) || PathPrefix(`/images/`))"
        # # - "traefik.http.routers.backend-secure.rule=Host(`eshop.tsilingeridis.eu`) && PathPrefix(`/images/`)"
        # - "traefik.http.routers.backend-secure.entrypoints=websecure"
        # - "traefik.http.routers.backend-secure.tls.certresolver=myresolver"
        # - "traefik.http.routers.backend-secure.service=backend-service"
        # - "traefik.http.routers.backend-secure.middlewares=test-compress"
        # - "traefik.http.services.backend-service.loadbalancer.server.port=3000"

        - "traefik.http.routers.parastaseis_backend.middlewares=serviceheaders"
        - "traefik.http.middlewares.serviceheaders.headers.accesscontrolalloworiginlist=*"
        - "traefik.http.middlewares.serviceheaders.headers.accesscontrolallowmethods=GET,PUT,POST,DELETE,PATCH,OPTIONS"
        - "traefik.http.middlewares.serviceheaders.headers.addvaryheader=true"
        - "traefik.http.middlewares.serviceheaders.headers.accessControlExposeHeaders=*"
        # - "traefik.http.middlewares.serviceheaders.headers.accesscontrolmaxage=100"

    # build: # specify the directory of the Dockerfile
    #   context: ./backend
    #   # dockerfile: Dockerfile.dev
    #   dockerfile: Dockerfile.prod
    depends_on:
      - mongo # link this service to the mongo service
    volumes:
      - ../../backend:/app
      - /etc/localtime:/etc/localtime:ro
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017
      SALT: $$2b$$10$$ZDX7eyQ1Ornf62rKqjlwBO
      # ME_ CONFIG_MONGODB_URL: mongodb://mongo:27017/eshop
    # use the "backend" network
    # networks:
    #   # - internal
    #   - proxy
